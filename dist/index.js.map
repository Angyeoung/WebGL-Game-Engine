{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/webgl.ts", "../index.ts"],
  "sourcesContent": ["\nexport class Color {\n\n    r: number;\n    g: number;\n    b: number;\n\n    constructor(r: number, g: number, b: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    static get red() { return new this(1, 0, 0); }\n    static get green() { return new this(0, 1, 0); }\n    static get blue() { return new this(0, 0, 1); }\n    static get white() { return new this(1, 1, 1); }\n    static get black() { return new this(0, 0, 0); }\n\n    static get aqua() { return new this(0.75, 0.85, 0.8); }\n}", "import { Color } from \"./utils.ts\";\n\n\n/** Wrapper for WebGL */\nexport class WebGL {\n    \n    canvas: HTMLCanvasElement;\n    gl: WebGL2RenderingContext;\n    \n\n    constructor(canvas: HTMLCanvasElement | null) {\n\n        const ctx = canvas?.getContext('webgl2');\n\n        if (!ctx)\n            console.error(\"Your browser does not support WebGL2\");\n        \n        this.gl = ctx ?? new WebGL2RenderingContext();\n        this.canvas = canvas ?? new HTMLCanvasElement();\n        \n        this.clearColor = Color.aqua;\n        this.clear();\n\n    }\n\n\n\n    set clearColor(color: Color) { this.gl.clearColor(color.r, color.g, color.b, 1); }\n\n\n\n    clear() {\n\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n\n    }\n\n\n\n    createProgram(vertSource: string = defaultVert, fragSource: string = defaultFrag): WebGLProgram | null {\n\n        const program = this.gl.createProgram();\n        const fragShader = this.createShader(fragSource, ShaderType.FRAG);\n        const vertSharer = this.createShader(vertSource, ShaderType.VERT);\n        if (!program || !fragShader || !vertSharer) return null;\n\n        this.gl.attachShader(program, fragShader);\n        this.gl.attachShader(program, vertSharer);\n        \n        if (!this.compileProgram(program))\n            return null;\n\n        this.gl.enable(this.gl.DEPTH_TEST);\n        this.gl.enable(this.gl.CULL_FACE);\n        this.gl.frontFace(this.gl.CW);\n        this.gl.cullFace(this.gl.BACK);\n\n        return program;\n\n    }\n\n\n\n    compileProgram(program: WebGLProgram): boolean {\n\n        this.gl.linkProgram(program);\n        this.gl.validateProgram(program);\n\n        const linkStatus = this.gl.getProgramParameter(program, this.gl.LINK_STATUS);\n        const validateStatus = this.gl.getProgramParameter(program, this.gl.VALIDATE_STATUS);\n        if (!linkStatus) {\n            console.error('Program linking failed:\\n\\n', this.gl.getProgramInfoLog(program));\n            return false;\n        }\n        if (!validateStatus) {\n            console.error('Program validation failed:\\n\\n', this.gl.getProgramInfoLog(program));\n            return false;\n        }\n        return true;\n\n    }\n\n\n\n    createShader(source: string, type: ShaderType): WebGLShader | null {\n\n        const shader = this.gl.createShader(type);\n        if (!shader) {\n            console.error('Shader creation failed');\n            return null;\n        }\n        \n        this.gl.shaderSource(shader, source);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('Shader compilation failed:\\n\\n', this.gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n\n    }\n\n\n\n}\n\n\nenum ShaderType {\n    FRAG = 35632,\n    VERT = 35633\n}\n\n\nconst defaultVert = `#version 300 es\n\nvoid main() {\n}\n`;\n\nconst defaultFrag = `#version 300 es\n\nprecision mediump float;\n\n\nvoid main() {\n}\n`;", "import { Vector3, Matrix4  } from \"./src/math.ts\";\nimport { WebGL } from \"./src/webgl.ts\";\n\n\nconst w = new WebGL(document.querySelector('canvas'));\n\nconst p = w.createProgram();"],
  "mappings": "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",
  "names": ["Color", "r", "g", "b", "WebGL", "canvas", "ctx", "Color", "color", "vertSource", "defaultVert", "fragSource", "defaultFrag", "program", "fragShader", "vertSharer", "linkStatus", "validateStatus", "source", "type", "shader", "defaultVert", "defaultFrag", "w", "WebGL", "p"]
}
